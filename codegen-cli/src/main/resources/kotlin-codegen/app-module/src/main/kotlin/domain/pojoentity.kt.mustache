/**
* {{{description}}}
{{#vars}}
* @param {{name}} {{{description}}}
{{/vars}}
*/
{{>generatedAnnotation}}
{{^vendorExtensions.isEmbeddable}}
@Entity
@Table(name = "{{vendorExtensions.tableName}}")
{{/vendorExtensions.isEmbeddable}}
{{#vendorExtensions.isEmbeddable}}
@Embeddable
{{/vendorExtensions.isEmbeddable}}
data class {{classname}}(
{{#vendorExtensions.addIdVar}}

	var id: String,
{{/vendorExtensions.addIdVar}}

{{#vars}}
	{{#isEnum}}
	{{^isContainer}}
<!--	{{>enumClass}}-->
	{{/isContainer}}
	{{#isContainer}}
	{{#mostInnerItems}}
	{{>enumClass}}
	{{/mostInnerItems}}
	{{/isContainer}}
	{{/isEnum}}
	{{#vendorExtensions.extraAnnotation}}
	{{{vendorExtensions.extraAnnotation}}}
	{{/vendorExtensions.extraAnnotation}}
	{{#vendorExtensions.isEmbedded}}
	{{^vendorExtensions.isHistory}}
	{{#vendorExtensions.embeddedComponent}}
	@AttributeOverrides(
		{{#vars}}
			{{#vendorExtensions.isEmbedded}}
				{{#vendorExtensions.embeddedComponent}}
					{{#vars}}
		AttributeOverride(name = "{{vendorExtensions.embeddedVarName}}", column = Column(name = "{{vendorExtensions.embeddedColumnName}}")),
					{{/vars}}
				{{/vendorExtensions.embeddedComponent}}
			{{/vendorExtensions.isEmbedded}}
			{{^vendorExtensions.isEmbedded}}
		AttributeOverride(name = "{{name}}", column = Column(name = "{{vendorExtensions.embeddedColumnName}}")),
			{{/vendorExtensions.isEmbedded}}
		{{/vars}}
	)
	{{/vendorExtensions.embeddedComponent}}
	{{/vendorExtensions.isHistory}}
	@Embedded
	{{/vendorExtensions.isEmbedded}}
	{{^vendorExtensions.isEmbedded}}
	{{#vendorExtensions.hasJsonType}}
	@Type(type = "json")
	@Column(name = "{{vendorExtensions.columnName}}", columnDefinition = "json")
	{{/vendorExtensions.hasJsonType}}
	{{^vendorExtensions.hasJsonType}}
	{{#isListContainer}}
	{{#vendorExtensions.isReferenceElement}}
	@ElementCollection
	@LazyCollection(LazyCollectionOption.FALSE)
	@CollectionTable(
			name = "{{vendorExtensions.joinTableName}}",
			joinColumns = [JoinColumn(name = "{{vendorExtensions.joinColumnName}}")]
	)
	@Column(name = "{{vendorExtensions.inverseJoinColumnName}}")
	{{/vendorExtensions.isReferenceElement}}
	{{^vendorExtensions.isReferenceElement}}
	@OneToMany(cascade = [CascadeType.ALL])
	@LazyCollection(LazyCollectionOption.FALSE)
	@JoinTable(
			name = "{{vendorExtensions.joinTableName}}",
			joinColumns = [JoinColumn(name = "{{vendorExtensions.joinColumnName}}", referencedColumnName = "id")],
			inverseJoinColumns = [JoinColumn(name = "{{vendorExtensions.inverseJoinColumnName}}", referencedColumnName = "id")]
	)
	{{/vendorExtensions.isReferenceElement}}
	{{/isListContainer}}
	{{^isListContainer}}
	{{#vendorExtensions.isOneToOne}}
	@OneToOne(cascade = [CascadeType.ALL], fetch = FetchType.EAGER{{#required}}, optional = false{{/required}})
	@JoinColumn(name = "{{{vendorExtensions.escapedColumnName}}}", referencedColumnName = "id")
	{{/vendorExtensions.isOneToOne}}
	{{^vendorExtensions.isOneToOne}}
	@Column(name = "{{{vendorExtensions.escapedColumnName}}}")
	{{/vendorExtensions.isOneToOne}}
	{{/isListContainer}}
	{{/vendorExtensions.hasJsonType}}
	{{/vendorExtensions.isEmbedded}}
	{{#vendorExtensions.isEnumValue}}
	@EnumValue(enumGroup = "{{vendorExtensions.enumGroupName}}"{{^required}}, optional = true{{/required}})
	{{/vendorExtensions.isEnumValue}}
	{{#isContainer}}
	var {{name}}: {{{datatypeWithEnum}}}{{#hasMore}},{{/hasMore}}
	{{/isContainer}}
	{{^isContainer}}
	var {{name}}: {{{datatypeWithEnum}}}{{#hasMore}},{{/hasMore}}
	{{/isContainer}}

{{/vars}}
) {{#parent}}: {{{parent}}}{{/parent}}{{^parent}}{{/parent}}
